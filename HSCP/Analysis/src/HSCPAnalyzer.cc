#include <sstream>
#include <bitset>

#include "HSCPAnalyzer.h"
#include "HSCPHistograms.h"

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
HSCPAnalyzer::HSCPAnalyzer(const std::string & aName) : Analyzer(aName){

		myHistos_ = 0;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
HSCPAnalyzer::~HSCPAnalyzer(){

  if(myHistos_) delete myHistos_;

}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
Analyzer* HSCPAnalyzer::clone() const {

        HSCPAnalyzer* clone = new HSCPAnalyzer(name());
        clone->setHistos(myHistos_);
        return clone;

};
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
void HSCPAnalyzer::initialize(TDirectory* aDir,
                             pat::strbitset *aSelections){

        mySelections_ = aSelections;

        myHistos_ = new HSCPHistograms(aDir);
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
void HSCPAnalyzer::finalize(){

        myHistos_->finalizeHistograms();
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
void HSCPAnalyzer::fillControlHistos(const HSCPEvent & myEvent){

  double pt1 = myEvent.getCandidate(0).getPt();
  double pt2 = myEvent.getCandidate(1).getPt();

  myHistos_->fill1DHistogram("h1DPt1",pt1);
  myHistos_->fill1DHistogram("h1DPt2",pt2);

}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
bool HSCPAnalyzer::analyze(const EventProxyBase& iEvent, ObjectMessenger *aMessenger){

  const EventProxyHSCP & myEventProxy = static_cast<const EventProxyHSCP&>(iEvent);
  const HSCPEvent & myEvent = myEventProxy.event;
    
  int eventID = myEvent.getEventId();
  double pt1 = myEvent.getCandidate(0).getPt();
  double pt2 = myEvent.getCandidate(1).getPt();


  std::cout<<"eventID: "<<eventID
	   <<" number of candidates: "<<myEvent.getNumberOfCandidates()
	   <<" pt1: "<<pt1<<" pt2: "<<pt2
	   <<std::endl;

  fillControlHistos(myEvent);
  
  return true;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
bool HSCPAnalyzer::analyze(const EventProxyBase& iEvent){

  return analyze(iEvent, 0);
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
